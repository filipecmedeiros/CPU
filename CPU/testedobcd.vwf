/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("bam")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 6;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("bam[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "bam";
}

SIGNAL("bam[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "bam";
}

SIGNAL("bam[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "bam";
}

SIGNAL("bam[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "bam";
}

SIGNAL("bam[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "bam";
}

SIGNAL("bam[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "bam";
}

SIGNAL("dezena")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dezena[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dezena";
}

SIGNAL("dezena[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dezena";
}

SIGNAL("dezena[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dezena";
}

SIGNAL("dezena[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dezena";
}

SIGNAL("dezena[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dezena";
}

SIGNAL("dezena[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dezena";
}

SIGNAL("dezena[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dezena";
}

SIGNAL("dezena[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dezena";
}

SIGNAL("unidade")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("unidade[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "unidade";
}

SIGNAL("unidade[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "unidade";
}

SIGNAL("unidade[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "unidade";
}

SIGNAL("unidade[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "unidade";
}

SIGNAL("unidade[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "unidade";
}

SIGNAL("unidade[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "unidade";
}

SIGNAL("unidade[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "unidade";
}

SIGNAL("unidade[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "unidade";
}

TRANSITION_LIST("bam[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 32.0;
		}
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 8.0;
	}
}

TRANSITION_LIST("bam[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("bam[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 62;
			LEVEL 0 FOR 8.0;
			LEVEL 1 FOR 8.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("bam[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 125;
			LEVEL 0 FOR 4.0;
			LEVEL 1 FOR 4.0;
		}
	}
}

TRANSITION_LIST("bam[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 250;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
	}
}

TRANSITION_LIST("bam[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 500;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
	}
}

TRANSITION_LIST("dezena[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 30;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 22.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("dezena[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("dezena[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 30;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 22.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("dezena[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 30;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 22.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("dezena[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("dezena[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 22.0;
		}
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("dezena[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 12.0;
		}
		LEVEL 1 FOR 8.0;
	}
}

TRANSITION_LIST("dezena[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}

TRANSITION_LIST("unidade[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 14;
			LEVEL 0 FOR 1.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 6.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 8.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 6.0;
			}
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 6.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 8.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 6.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 6.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 8.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
	}
}

TRANSITION_LIST("unidade[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 30;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 2.0;
				LEVEL 0 FOR 8.0;
			}
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 10.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 8.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
	}
}

TRANSITION_LIST("unidade[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 30;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 9.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 9.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
	}
}

TRANSITION_LIST("unidade[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 14;
			NODE
			{
				REPEAT = 2;
				NODE
				{
					REPEAT = 2;
					LEVEL 1 FOR 1.0;
					LEVEL 0 FOR 2.0;
				}
				NODE
				{
					REPEAT = 2;
					LEVEL 1 FOR 1.0;
					LEVEL 0 FOR 1.0;
				}
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
			NODE
			{
				REPEAT = 2;
				NODE
				{
					REPEAT = 2;
					LEVEL 1 FOR 1.0;
					LEVEL 0 FOR 2.0;
				}
				NODE
				{
					REPEAT = 2;
					LEVEL 1 FOR 1.0;
					LEVEL 0 FOR 1.0;
				}
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
	}
}

TRANSITION_LIST("unidade[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 30;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 3.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 0 FOR 1.0;
					LEVEL 1 FOR 1.0;
				}
			}
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 1.0;
			}
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
	}
}

TRANSITION_LIST("unidade[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 30;
			LEVEL 0 FOR 1.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 3.0;
				LEVEL 0 FOR 3.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 3.0;
			}
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
	}
}

TRANSITION_LIST("unidade[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 14;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 2.0;
				LEVEL 0 FOR 5.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			LEVEL 1 FOR 4.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 5.0;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
				LEVEL 1 FOR 2.0;
			}
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 1.0;
	}
}

TRANSITION_LIST("unidade[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 33.0;
			LEVEL 0 FOR 31.0;
		}
		LEVEL 1 FOR 33.0;
		LEVEL 0 FOR 7.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "bam";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6;
}

DISPLAY_LINE
{
	CHANNEL = "bam[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "bam[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "bam[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "bam[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "bam[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "bam[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dezena";
	EXPAND_STATUS = EXPANDED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
	CHILDREN = 8, 9, 10, 11, 12, 13, 14, 15;
}

DISPLAY_LINE
{
	CHANNEL = "dezena[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "dezena[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "dezena[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "dezena[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "dezena[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "dezena[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "dezena[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "dezena[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 7;
}

DISPLAY_LINE
{
	CHANNEL = "unidade";
	EXPAND_STATUS = EXPANDED;
	RADIX = ASCII;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
	CHILDREN = 17, 18, 19, 20, 21, 22, 23, 24;
}

DISPLAY_LINE
{
	CHANNEL = "unidade[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "unidade[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "unidade[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "unidade[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "unidade[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "unidade[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "unidade[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "unidade[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 16;
}

TIME_BAR
{
	TIME = 5000;
	MASTER = TRUE;
}
;
